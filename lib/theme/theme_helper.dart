import 'package:flutter/material.dart';
import 'package:project/utils/size_utils.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.onPrimary,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12.h),
          ),
          shadowColor: appTheme.black900.withOpacity(0.15),
          elevation: 2,
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.white,
          side: BorderSide(
            color: Colors.white,
            width: 2.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return appTheme.grey800;
          }
          return colorScheme.onSurface;
        }),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return appTheme.grey800;
          }
          return colorScheme.onSurface;
        }),
        side: BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.gray900,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();

  void changeTheme(String s) {}
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: Colors.black,
          fontSize: 16.fSize,
          fontFamily: 'Work Sans',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: Colors.black,
          fontSize: 14.fSize,
          fontFamily: 'Work Sans',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: Colors.grey.shade600,
          fontSize: 12.fSize,
          fontFamily: 'Work Sans',
          fontWeight: FontWeight.w400,
        ),
        displaySmall: TextStyle(
          color: Colors.black,
          fontSize: 36.fSize,
          fontFamily: 'Work Sans',
          fontWeight: FontWeight.w400,
        ),
        headlineLarge: TextStyle(
          color: Colors.black,
          fontSize: 30.fSize,
          fontFamily: 'Work Sans',
          fontWeight: FontWeight.w700,
        ),
        headlineMedium: TextStyle(
          color: Colors.black,
          fontSize: 28.fSize,
          fontFamily: 'Work Sans',
          fontWeight: FontWeight.w700,
        ),
        headlineSmall: TextStyle(
          color: Colors.black,
          fontSize: 24.fSize,
          fontFamily: 'Work Sans',
          fontWeight: FontWeight.w400,
        ),
        labelLarge: TextStyle(
          color: Colors.black,
          fontSize: 12.fSize,
          fontFamily: 'Work Sans',
          fontWeight: FontWeight.w700,
        ),
        labelMedium: TextStyle(
          color: Colors.black,
          fontSize: 10.fSize,
          fontFamily: 'Work Sans',
          fontWeight: FontWeight.w700,
        ),
        titleLarge: TextStyle(
          color: Colors.black,
          fontSize: 20.fSize,
          fontFamily: 'Work Sans',
          fontWeight: FontWeight.w400,
        ),
        titleMedium: TextStyle(
          color: Colors.black,
          fontSize: 18.fSize,
          fontFamily: 'Work Sans',
          fontWeight: FontWeight.w700,
        ),
        titleSmall: TextStyle(
          color: Colors.black,
          fontSize: 14.fSize,
          fontFamily: 'Work Sans',
          fontWeight: FontWeight.w700,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF6C6C6C),
    primaryContainer: Color(0XFF6C6C6C),
    // Error colors
    errorContainer: Color(0XFF5C5C5C),
    // On colors(text colors)
    onPrimary: Color(0XFFFFFFFF),
    onPrimaryContainer: Color(0XFF6C6C6C),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  //background
  Color get background => Color(0Xfff4f4f4);
  // Amber
  Color get grey800 => Color(0Xff6C6C6C);
  // Black
  Color get black900 => Color(0XFF000000);
  // BlueGray
  Color get blueGray100 => Color(0XFFD9D9D9);
  // Gray
  Color get gray200 => Color(0XFFEAEAEA);
  Color get gray300 => Color(0XFFDCDCDC);
  Color get gray900 => Color(0XFF262626);
  // LightGreen
  // Color get 100 => Color(0XFF6C6C6C);
  // // Orange
  // Color get orange200 => Color(0XFFFFC789);
  // Color get orange50 => Color(0XFFFFE9D0);
  // // Red
  // Color get red100 => Color(0XFFF8C8C8);
  // Color get red400 => Color(0XFFE95555);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
